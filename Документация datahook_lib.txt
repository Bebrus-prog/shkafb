ДОКУМЕНТАЦИЯ DATAHOOK_LIB

инициализация библиотеки
	название подключаемой базы данных указывается в файле hook_config.py в графе database
	пример SQL-команд таблиц БД указан в файле sql_db_example.txt

func str_xor
	принимает: 
		две строки
	возвращает: 
		[bool] результат исключающего ИЛИ для двух строк

func get_date
	описание:
		получение сегодняшней даты (DD/MM/YYYY)
	возвращает:
		[str] - дата

func login_check_format / product_name_check_format
	принимает: 
		login [str] - проверяемая строка
	возвращает: 
		{"error": error}
		- error = "length", если не подоходит по длине,
		- error = "symbol", если не подходит по символам,
		- error = None, если ошибок нет
	описание: 
		проверка вводимых данных

func hash_password
	принимает: 
		password [str] - хэшируемая строка
	возвращает: 
		[str] - хэшированная строка

func check_password
	принимает: 
		stored_password [str] - пароль в бд
		provided_password [str] - введённый пароль
	возвращает: 
		[bool] true - пройдено, false - не пройдено
	описание: 
		сравнение паролей в бд и введённого

func fetch_login
	принимает:
		login [str] - юзернейм
		password [str] - пароль
		gen_session_key [str] - сгенерированный ключ сессии
		ip_addr [str] - IP-адрес клиента
	возвращает: 
		{"error": error, "permission": permission}
		- error = "length", "symbol" в соответствии с length_check_format
		- error = "no_result", если пользователь не найден
		- error = "wrong_password", если пароль неверен
		- error = None, если авторизация пройдена
		-- permission [str] существует, когда error = None, и равен "user" / "admin".
	описание: 
		прохождение авторизации, создание сессии в таблице sessions в соответствии с переданными данными. permission передаётся назад, чтобы перебросить юзера на нужную страницу.

func session_check
	принимает:
		session_key [str] - ключ сессии
		ip_addr [str] - IP-адрес клиента
		admin_needed [bool] - права доступа к странице (False - права пользователя, True - права администратора)
		*** Примечание *** Администратор не может получать доступ к страницам с правами пользователя. Наоборот соответственно.
	возвращает: 
		{"error": error}
		- error = no_result, если нет в базе
		- error = no_permission, если нет доступа
		- error = None, если проверка пройдена
	описание: 
		проверка сессии пользователя на права доступа к странице

func fetch_inventory
	описание:
		получение информации о запрашиваемых объектах инвентаря
	замечание:
		sort_by = sort, search_in = qt, search_word = q (в переводе с GET-запроса)
    		sort_by может быть только alph / amount / stat (алфавит / количество / статус)
    		search_in может быть только name / user (поиск по... наименованию / юзернейму)
    		0 < длина search_word < 64 и содержит только буквы (латиница и кириллица) и цифры
	принимает:
		res_order [bool] - возрастание (false) / убывание (true) [по умолчанию false]
		sort_by [str] - признак сортировки (по умолчанию alph)
		search_word [str] - ключевое слово для поиска
		search_in [str] - признак поиска
	возвращает:
		{"error": error, "results": results}
		ошибки (error):
		- error = not_enough_arguments, если аргументы переданы не до конца (search_word и search_in передаются вместе)
		- error = wrong_sorting_type, если введён неправильный тип сортировки
		- error = wrong_searching_type, если введён неправильный тип поиска
		- error = length / symbol при проверке наименования продукта/юзернейма в соответствии с length_check_format
		- error = no_items, если не найдено информации по продукту/пользователю
		- error = None, если проверка пройдена
		результат (results):
		- существует только когда error = None
		- если есть ключевое слово и запрашивается поиск по наименованию / если нет ключевого слова и признака поиска:
			колонки: ID предмета, имя, кол-во в инвентаре, статус (0-2)
			пример: {'error': None, 'results': [(2, 'atestinventoryitem2', 3, 0), (1, 'ctestinventoryitem1', 1, 1), (3, 'btestinventoryitem3', 2, 2)]}
		- если есть ключевое слово и запрашивается поиск по юзернейму:
			колонки: ID предмета, имя, статус, кол-во предметов в распоряжении, время создания заказа, комментарий к заказу
			пример: {'error': None, 'results': [(1, 'ctestinventoryitem1', 1, 5, 09/01/2025, 'TestDescription1'), (3, 'btestinventoryitem3', 2, 2, 09/01/2025, 'TestDescription3')]}

func pick_inventory_element_by_id
	описание:
		дополнительный параметр поиска, вывод информации об определенном объекте с определенным ID предмета
	принимает:
		eid [int] - ID предмета в инвентаре
	возвращает:
		{"error": error, "result": result}
		ошибки (error):
		- error = no_result, если объекта нет в базе
		- error = None, если операция выполнена успешно
		результат (result):
		- result существует только когда error = None
		- колонки: ID предмета, имя, кол-во в инвентаре, статус (0-2)
		пример: {'error': None, 'result': (3, 'btestinventoryitem3', 2, 2)}

func remove_from_inventory
	описание:
		удаление элемента из инвентаря и запись о действии в лог
	принимает:
		eid [int] - ID предмета в инвентаре
		session_key [str] - ключ сессии
		ip_addr [str] - IP-адрес клиента
	возвращает:
		{"error": error}
		- error = session_error, если сессия истекла
		- error = no_result, если объект не найден
		- error = None, если операция выполнена успешно

func add_to_inventory
	описание:
		добавление элемента в инвентарь и запись о действии в лог
	принимает:
		name [str] - имя предмета
		amount [int] - количество
		status [int] - состояние [0-2] -> (Состояние «Новое» - 0; «Используемое» - 1; «Непригодное» - 2)
		session_key [str] - ключ сессии
		ip_addr [str] - IP-адрес клиента
	возвращает:
		{"error": error, "object_id": id}
		ошибки (error):
		- error = length / symbol при проверке наименования продукта в соответствии с product_name_check_format
		- error = wrong_status, если неправильно введён номер состояния предмета [0-2]
		- error = session_error, если сессия пользователя истекла
		- error = object_already_exists, если элемент с таким именем уже существует
		- error = None, если операция выполнена успешно
		-- object_id [str] - ID созданного в инвентаре предмета (существует только когда error = None)

func edit_inventory_object
	описание:
		изменение элемента по идентификатору и запись о действии в лог
	принимает:
		eid [int] - ID изменяемого элемента
		new_name [str] - имя предмета
		new_amount [int] - количество
		new_status [int] - состояние [0-2] -> (Состояние «Новое» - 0; «Используемое» - 1; «Непригодное» - 2)
		session_key [str] - ключ сессии
		ip_addr [str] - IP-адрес клиента
	возвращает:
		{"error": error}
		- error = length / symbol при проверке наименования продукта в соответствии с product_name_check_format
		- error = wrong_status, если неправильно введён номер состояния предмета [0-2]
		- error = session_error, если сессия истекла
		- error = no_result, если объект не найден
		- error = None, если операция выполнена успешно

func pin_inventory_element
	описание:
		закрепление элемента инвентаря за каким-либо пользователем
	принимает:
		eid [int] - ID прикрепляемого элемента
		username [str] - юзернейм, к которому прикрепить элемент
		pinning_amount [int] - прикрепляемое количество
		description [str] - описание (может быть пустым)
	возвращает:
		{"error": error}
		- error = no_user, если пользователь не найден
		- error = no_result, если элемент не существует
		- error = not_enough_amount, если недостаточно штук элемента в инвентаре
		- error = None, если операция выполнена успешно
	примечание:
		- если к пользователю уже прикреплён передаваемый объект, поэтому при вызове функции прикрепления, прикреплённые объекты складываются и если комментарий не приведён, то он остаётся тем же
		- из инвентаря вычитаются прикрепляемые объекты
		- когда прикрепляется новый по состоянию предмет, его статус изменяется на использованный

func register_user
	описание:
		регистрация нового пользователя
	принимает:
		username [str] - никнейм
		first_name [str] - имя пользователя
		password [str] - пароль
		second_name [str] - фамилия (может быть пустым)
	возвращает:
		{"error": error}
		- error = length / symbol при проверке никнейма/имени/фамилии в соответствии с login_check_format и product_name_check_format
		- error = user_existing, если пользователь уже существует в базе
		- error = None, если операция выполнена успешно

func assign_administrator
	описание:
		назначение пользователя администратором
	принимает:
		username [str] - никнейм
	возвращает:
		{"error": error}
		- error = length / symbol при проверке никнейма в соответствии с login_check_format
		- error = no_user, если пользователь не существует в базе
		- error = None, если операция выполнена успешно

func assign_user
	описание:
		разжалование администратора
	принимает:
		username [str] - никнейм
	возвращает:
		{"error": error}
		- error = length / symbol при проверке никнейма в соответствии с login_check_format
		- error = no_user, если пользователь не существует в базе
		- error = None, если операция выполнена успешно

func is_admin
	описание:
		функция, выдающая результат прав доступа пользователя по ключу сессии
	принимает:
		session_key [str] - ключ сессии
		ip_addr [str] - IP-адрес клиента
	возвращает:
		{"error": error, "result": result [bool]}
		- error = session_error, если сессия истекла
		- error = None, если операция выполнена успешно
		- result существует только когда error = None и равен True, когда клиент - Администратор, если нет, то False

func create_request
	описание:
		функция, создающая заявку от пользователя
	принимает:
		r_type [str] - тип заявки [r_type = to_pin_element (на прикрепление предмета), to_repair_element (на починку/замену предмета)]
		eid [int] - ID предмета
		amount [int] - коилчество
		session_key [str] - ключ сессии
		ip_addr [str] - IP-адрес клиента
		description [str] - описание (может быть пустым)
	возвращает:
		{"error": error}
		- error = session_error, если сессия истекла
		- error = wrong_type, если введён неправильный тип заявки
		- error = wrong_amount, если в заявке указано неправильное количество (< 0)
		- error = no_result, если элемент не существует
		- error = not_enough_amount, если недостаточно штук элемента в инвентаре
		- error = request_already_exists, если точно такая же заявка уже существует
		- error = None, если операция выполнена успешно

func fetch_all_requests
	описание:
		возвращает заявки в порядке их создания по возрастанию (используется администратором)
	принимает:
		r_type [str] - тип заявки [r_type = to_pin_element (на прикрепление предмета), to_repair_element (на починку/замену предмета)]
	возвращает:
		{"error": error, "results": results [list]}
		- error = wrong_type, если введён неправильный тип заявки
		- error = no_results, если элементов не найдено
		- error = None, если операция выполнена успешно
		-- results существует только когда error = None и передаёт следующие рузльтаты:
			колонки: ID заявки, ID прдемета, наименование предмета, никнейм пользователя, кол-во предметов в заявке, дата подачи заявки, описание заявки
	пример:
		{'error': None, 'results': [(1, 1, 'edt-test item итем1', 'test2', 11, '11/01/2025', 'h'), (2, 1, 'edt-test item итем1', 'test2', 11, '11/01/2025', '')]}

func approve_request
	описание:
		принять заявку и удалить ее из списка заявок
	примечание:
		принятие и отмена заявки по ремонту означают её удаление
		принятие заявки по прикреплению автоматически прикрепляет элемент соотвтетственно заявке
	принимает:
		request_id [int] - ID заявки
	возвращает:
		{"error": error}
		- error = no_result, если заявки не существует
		- error = no_user/no_result/not_enough_amount в соответствии с pin_inventory_element
		- error = None, если операция выполнена успешно

func decline_request
	описание:
		отмена заявки (удаление заявки) [может быть использвано только администратором]
	принимает:
		request_id [int] - ID заявки
	возвращает:
		{"error": error}
		- error = no_result, если заявки не существует
		- error = None, если операция выполнена успешно

func cancel_request
	описание:
		отмена заявки (удаление заявки) с учётом наличия прав на собственность заявки [может быть использвано только пользователем]
	принимает:
		request_id [int] - ID заявки
		session_key [str] - ключ сессии
		ip_addr [str] - IP-адрес клиента
	возвращает:
		{"error": error}
		- error = session_error, если сессия истекла
		- error = no_result, если заявки не существует / нет доступа к заявке
		- error = None, если операция выполнена успешно

func fetch_sent_requests
	описание:
		вывод данных об отправленных пользователем заявках, которые ещё не были рассмотрены администрацией
	принимает:
		session_key [str] - ключ сессии
		ip_addr [str] - IP-адрес клиента
	возвращает:
		{"error": error, "results": results [list]}
		- error = session_error, если сессия истекла
		- error = no_results, если отправленных заявок не найдено
		-- results существует только когда error = None и передаёт следующие рузльтаты:
			колонки: ID заявки, тип заявки, ID предмета, наименование предмета, кол-во предметов в заявке, время подачи заявки, комментарий
	пример:
		{'error': None, 'results': [(6, 'to_pin_element', 1, 'edt-test item итем1', 2, '11/01/2025', 'tst'), (7, 'to_pin_element', 5, 'edt-test item итем2', 2, '11/01/2025', 'tst')]}

func end_session
	описание:
		выход пользователя из системы, завершение сессии
	принимает:
		session_key [str] - ключ сессии
		ip_addr [str] - IP-адрес клиента
	возвращает:
		{"error": error}
		- error = session_error, если сессия истекла
		- error = None, если операция выполнена успешно

func fetch_all_users
	описание:
		получение списка пользователей по критерию типа прав
	принимает:
		u_type [str] - тип поиска
		(u_type = admin, если вывести только администраторов)
		(u_type = user, если вывести только пользователей)
	возвращает:
		{"error": error, "results": results}
		- error = no_results, если нет записей о выбранных клиентах
		- error = None, если операция выполнена успешно
		-- results существует только когда error = None и передаёт следующие рузльтаты:
			колонки: ID пользователя, никнейм, имя, фамилия, дата создания
	пример:
		{'error': None, 'results': [(2, 'test2', 'Test2', None, '11/01/2025'), (3, 'test3', 'Test3', None, '11/01/2025'), (4, 'createtest1', 'CTest1', '', '11/01/2025')]}

func terminate_all_sessions_of
	описание:
		"убить" все сессии пользователя
	принимает:
		uid [int] - ID пользователя
	возвращает:
		{"error": error}
		- error = no_result, если все сессии пользователя закрыты
		- error = None, если операция выполнена успешно

func change_password
	описание:
		изменение пароля и "убийство" всех сессий
	принимает:
		session_key [str] - ключ сессии
		ip_addr [str] - IP-адрес клиента
		old_password [str] - старый пароль
		new_password [str] - новый пароль
	возвращает:
		{"error": error}
		- error = session_error, если сессия истекла
		- error = wrong_password, если текущий пароль неверен
		- error = no_result, если все сессии пользователя закрыты; в соответствии с terminate_all_sessions_of
		- error = None, если операция выполнена успешно

func delete_user_of
	описание:
		удаление профиля, его принадлежностей, заявок и истории сессий [может использоваться только администратором]
	принимает:
		uid [int] - ID пользователя
	возвращает:
		{"error": error}
		- error = no_result, если пользователь не найден
		- error = None, если операция выполнена успешно

func fetch_my_belongings
	описание:
		получение информации о закрепленных со стороны пользователя элементов
	принимает:
		session_key [str] - ключ сессии
		ip_addr [str] - IP-адрес клиента
	возвращает:
		{"error": error, "results": results}
		- error = session_error, если сессия истекла
		- error = no_results, если нет записей о закрепленных объектах
		- error = None, если операция выполнена успешно
		-- results существует только когда error = None и передаёт следующие рузльтаты:
			колонки: ID принадлежности элемента, ID элемента, наименование, прикреплённое количество, время прикрепления, комментарий
	пример:
		{'error': None, 'results': [(4, 7, 'тестик плотный', 10, '11/01/2025', 'testDescr'), (5, 6, 'adding_item test 1488 тест2', 40, '11/01/2025', 'testDescr3')]}

func return_my_belonging
	описание:
		вернуть элемент в инвентарь, добровольно открепить его от профиля
	примечание:
		при откреплении элемента, имеющееся кол-во в инвентаре складывается с откреплённым
	принимает:
		bid [int] - ID принадлежности
		session_key [str] - ключ сессии
		ip_addr [str] - IP-адрес клиента
	возвращает:
		{"error": error}
		- error = session_error, если сессия истекла
		- error = no_result, если нет записей о принадлежности
		- error = no_permission, если выбрана чужая принадлежность
		- error = None, если операция выполнена успешно

func add_to_plan
	описание:
		добавление элемента в план закупок
	принимает:
		name [str] - наименование
		price [int] - цена
		amount [int] - количество
		supplier_name [str] - название поставщика

func remove_from_plan
	описание:
		удаление элемента из плана закупок
	принимает:
		pid [int] - ID элемента в плане
	возвращает:
		{"error": error}
		- error = no_result, если нет элемента с таким ID
		- error = None, если операция выполнена успешно

func fetch_plan
	описание:
		получение списка элементов в плане закупок
	возвращает:
		{"error": error, "results": results}
		- error = no_results, если записей в плане нет
		-- results существует только когда error = None и передаёт следующие рузльтаты:
			колонки: ID элемента в плане, наименование, цена, количество, имя поставщика
	пример:
		{'error': None, 'results': [(2, 'a', 1, 1, 'a'), (3, 'arbuz', 1, 2, 'OOO LOL')]}

func create_report
	описание:
		создание отчета
	возвращет:
		[str] - отчёт
	пример:
		ОТЧЁТ ПО ИСПОЛЬЗОВАНИЮ И СОСТОЯНИЮ ИНВЕНТАРЯ
		Актуален на: 12/01/2025
		
		Подробности об использовании инвентаря:
		Всего в использовании находится 60 предметов.
		Элементы в использовании:
			id  | количество |   наименование
			5   |     50     | edt-test item итем2
			7   |     10     | test item7

		
		Подробности о состоянии элементов инвентаря:
		Всего предметов: 100
		Всего новых предметов: 0
		Всего использованных предметов: 86
		Всего сломанных предметов: 14

		Сломанные элементы:
			id  |   наименование
			7   | test item7
			8   | test item8


		Данный отчёт составлен автоматически.